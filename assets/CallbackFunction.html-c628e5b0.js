import{_ as e,p as o,q as c,w as p,s as n,R as s,t,Y as i,n as l}from"./framework-aa5c4115.js";const u={},d=n("p",null,"JavaScript是一种异步语言，异步操作和函数的回调将是开发人员频繁使用的步骤。",-1),r=n("h1",{id:"回调函数",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#回调函数","aria-hidden":"true"},"#"),s(" 回调函数")],-1),k=n("blockquote",null,[n("p",null,"本文xxx字，阅读大概需要x分xx秒")],-1),v=n("h2",{id:"回调函数的定义",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#回调函数的定义","aria-hidden":"true"},"#"),s(" 回调函数的定义")],-1),h=n("p",null,[n("code",null,"callback"),s(" 翻译为回调，作为名词有回拨的电话的意思，字面意思就是回头再做某事。")],-1),m=n("p",null,"把函数理解为你要做的事情，回调函数就是你要回头再做的事情。",-1),_=n("p",null,"A callback is a function that is passed as an argument to another function and is executed after its parent function has completed.",-1),b=n("p",null,"译：回调是作为参数传递给另一个函数的函数，在父函数完成后执行。",-1),f={href:"https://learn.jquery.com/about-jquery/how-jquery-works/#Callback_and_Functions",target:"_blank",rel:"noopener noreferrer"},g=i(`<p>我们日常使用的<code>setTimeout()</code>计时器方法就是基本的回调模式，它需要接受三个参数：<code>function(必要)</code>、<code>code(可选)</code>、<code>delay(可选)</code>，其中我们的主角<code>function</code>就是要执行的部分，它在<code>setTimeout</code>内被调用。</p><p>例子：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> time <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">setTimeout</span><span class="token punctuation">(</span>foo<span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span>
<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>foo函数没有立刻执行而是等待了一秒后再执行。类似于<code>foo</code>函数这种作为参数传给其他函数，并在其外部函数内被执行的称为<strong>回调函数</strong>。</p><h2 id="回调函数的必要性" tabindex="-1"><a class="header-anchor" href="#回调函数的必要性" aria-hidden="true">#</a> 回调函数的必要性</h2><h3 id="javascript是单线程" tabindex="-1"><a class="header-anchor" href="#javascript是单线程" aria-hidden="true">#</a> JavaScript是单线程</h3><p>JavaScript在构造之初就是单线程，因为JavaScript是可以直接处理浏览器DOM节点的，单线程是为了避免DOM操作冲突。但是单线程的缺点显而易见，当遇到需要时间处理的事件时，线程并不会等待而是直接放到任务队列，等到同步任务执行完毕才可处理异步事件。</p><p>例子：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;延时b&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;b&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/*
a
b
延时b
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>js引擎没有等待<code>setTimeout</code>而是等待队列空闲时才等待<code>setTimeout</code>。</p>`,10),x={href:"https://dailc.github.io/2018/01/21/js_singlethread_eventloop.html",target:"_blank",rel:"noopener noreferrer"},j=n("h3",{id:"异步模式",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#异步模式","aria-hidden":"true"},"#"),s(" 异步模式")],-1),y=n("p",null,"JavaScript本身就是异步的，遇到某些特定任务无法立刻得到结果，特定任务指：",-1),w=n("ul",null,[n("li",null,"通过对某些端点进行 API 调用来获取数据"),n("li",null,"通过发送网络请求从远程服务器获取一些资源（例如，文本文件、图像文件、二进制文件等")],-1),T=n("p",null,"异步结构的设计让浏览器不会等待异步任务完成进而不会形成阻塞，例如使用某宝购物车时图片加载未完成不会影响你提交下单请求。",-1);function q(S,C){const a=l("ExternalLinkIcon");return o(),c("div",null,[d,p(" more "),r,k,v,h,m,n("blockquote",null,[_,b,n("p",null,[s("-- jQuery文档"),n("a",f,[s("How jQuery Works"),t(a)])])]),g,n("p",null,[n("a",x,[s("了解更多 : javascript运行机制"),t(a)])]),j,y,w,T])}const N=e(u,[["render",q],["__file","CallbackFunction.html.vue"]]);export{N as default};
