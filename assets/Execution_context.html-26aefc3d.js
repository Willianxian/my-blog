import{_ as o,p as r,q as i,w as p,s as n,R as s,t as e,Y as t,n as l}from"./framework-aa5c4115.js";const c="/assets/image-20220810155506159-913d0544.png",d={},u=n("p",null,"JavaScript必学进阶知识点：执行上下文，本文浅说一下执行上下文和执行栈，了解执行上下文对理解变量提升，作用域，闭包等至关重要",-1),v=t(`<h1 id="执行上下文" tabindex="-1"><a class="header-anchor" href="#执行上下文" aria-hidden="true">#</a> 执行上下文</h1><p>执行上下文是一种对Javascript代码执行环境的一种抽象概念，也就是说只要有Javascript代码运行，那么它就一定是运行在执行上下文中。</p><h2 id="执行上下文类型" tabindex="-1"><a class="header-anchor" href="#执行上下文类型" aria-hidden="true">#</a> 执行上下文类型</h2><p>分为三种：</p><ul><li>全局执行上下文：只有一个，浏览器中的全局对象就是 <code>window</code>对象，<code>this</code> 指向这个全局对象</li><li>函数执行上下文：存在无数个，只有在函数被调用的时候才会被创建，每次调用函数都会创建一个新的执行上下文</li><li>Eval 函数执行上下文： 指的是运行在 <code>eval</code> 函数中的代码，很少用而且不建议使用</li></ul><p><strong>栗子</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code> <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">&#39;hi&#39;</span><span class="token punctuation">;</span>
    <span class="token keyword">function</span> <span class="token function">person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">function</span> <span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> a
        <span class="token punctuation">}</span>  
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+c+'" alt="image-20220810155506159"></p><p>全局上下文只有一个就是window对象，函数上下文有<code>person()</code>和<code>sayName()</code>,每创建一个函数就拥有一个新的函数上下文，私有的作用域。</p><h2 id="执行栈" tabindex="-1"><a class="header-anchor" href="#执行栈" aria-hidden="true">#</a> 执行栈</h2><p>也称为<code>调用栈</code>，就是数据结构中的栈，先进后出，存储被创建的上下文。每当有新的函数上下文创建就会加于栈顶，当函数执行完毕，就会从栈顶抛出，调用下一个上下文，直到抛出全局上下文。</p><h2 id="创建上下文" tabindex="-1"><a class="header-anchor" href="#创建上下文" aria-hidden="true">#</a> 创建上下文</h2><p>创建执行上下文有两个阶段：<strong>创建阶段</strong> 和 <strong>执行阶段</strong>。</p><p>在创建阶段会发生三件事：</p><ol><li><strong>this</strong> 值的决定，即我们所熟知的 <strong>This 绑定</strong>。</li><li>创建<strong>词法环境</strong>组件。</li><li>创建<strong>变量环境</strong>组件。</li></ol><h3 id="this的绑定" tabindex="-1"><a class="header-anchor" href="#this的绑定" aria-hidden="true">#</a> this的绑定</h3><p>全局上下文this指向全局对象<strong>window</strong></p><p>函数this的绑定需要观察函数的执行：</p><ul><li>如果是一个对象函数执行，那<code>this</code>指向那个对象</li><li>如果在全局中执行，则指向全局或者<code>undefind</code>(严格模式下)</li></ul><h3 id="词法环境" tabindex="-1"><a class="header-anchor" href="#词法环境" aria-hidden="true">#</a> 词法环境</h3>',20),m={href:"https://262.ecma-international.org/6.0/#sec-lexical-environments",target:"_blank",rel:"noopener noreferrer"},k=t("<blockquote><p><em>词法环境</em>是一种规范类型，用于根据 ECMAScript 代码的词法嵌套结构定义<em>标识符</em>与特定变量和函数的关联。词法环境由一个环境记录和一个可能对<em>外部</em>词法环境的空引用组成。</p></blockquote><p>这里的标识符是变量的名字，特定变量就是实际的对象（指函数类型对象或原始数据的引用）。</p><ul><li><strong>环境记录器</strong> 存储变量和函数声明的实际位置。环境记录器分为<strong>声明式环境记录器</strong>和<strong>对象环境记录器</strong>分别位于<code>函数环境</code>中和<code>全局环境</code>中。作用分别是：1）存储变量、函数和参数；2）用来定义出现在<strong>全局上下文</strong>中的变量和函数的关系。</li><li><strong>外部环境的引用</strong> 意味着它可以访问其父级词法环境（作用域），全局的外部引用是空</li></ul>",3),h=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,[s("外部环境的引用与this不同，全局上下文this指向Windows，外部环境引用是"),n("code",null,"<null>")])],-1),g=t(`<p><strong>伪代码：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//全局执行上下文</span>
GlobalExectionContext <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token comment">//全局词法环境</span>
  <span class="token literal-property property">LexicalEnvironment</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token comment">//环境记录器：对象环境记录器</span>
    <span class="token literal-property property">EnvironmentRecord</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">Type</span><span class="token operator">:</span> <span class="token string">&quot;Object&quot;</span><span class="token punctuation">,</span>
      <span class="token comment">// 在这里绑定标识符</span>
    <span class="token punctuation">}</span>
      <span class="token comment">//外部环境的引用</span>
    <span class="token literal-property property">outer</span><span class="token operator">:</span> <span class="token operator">&lt;</span><span class="token keyword">null</span><span class="token operator">&gt;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">//函数执行上下文</span>
FunctionExectionContext <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">LexicalEnvironment</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">EnvironmentRecord</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token comment">//声明式环境记录器</span>
      <span class="token literal-property property">Type</span><span class="token operator">:</span> <span class="token string">&quot;Declarative&quot;</span><span class="token punctuation">,</span>
      <span class="token comment">// 在这里绑定标识符</span>
    <span class="token punctuation">}</span>
    <span class="token literal-property property">outer</span><span class="token operator">:</span> <span class="token operator">&lt;</span>Global or outer <span class="token keyword">function</span> environment reference<span class="token operator">&gt;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),b={class:"custom-container details"},_=n("summary",{class:"custom-container-title"},"参考文献",-1),x={href:"https://vue3js.cn/interview/JavaScript/context_stack.html#%E4%B8%80%E3%80%81%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87",target:"_blank",rel:"noopener noreferrer"},f={href:"https://zhuanlan.zhihu.com/p/107552264",target:"_blank",rel:"noopener noreferrer"},y={href:"https://juejin.cn/post/6844903682283143181#heading-4",target:"_blank",rel:"noopener noreferrer"},w=n("hr",null,null,-1);function E(j,B){const a=l("ExternalLinkIcon");return r(),i("div",null,[u,p("more-"),v,n("p",null,[n("a",m,[s("ECMA-262 第 6 版"),e(a)]),s("中规定词法作用域是：")]),k,h,g,n("details",b,[_,n("ul",null,[n("li",null,[n("p",null,[n("a",x,[s("面试官：JavaScript中执行上下文和执行栈是什么？ | web前端面试 - 面试官系列 (vue3js.cn)"),e(a)])])]),n("li",null,[n("p",null,[n("a",f,[s("理解Javascript中的执行上下文和执行栈 - 知乎 (zhihu.com)"),e(a)])])]),n("li",null,[n("p",null,[s("["),n("a",y,[s("译] 理解 JavaScript 中的执行上下文和执行栈 - 掘金 (juejin.cn)"),e(a)])])])])]),w])}const q=o(d,[["render",E],["__file","Execution_context.html.vue"]]);export{q as default};
