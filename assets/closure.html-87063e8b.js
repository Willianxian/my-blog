import{_ as o,p as t,q as c,s as n,R as s,t as e,Y as p,n as i}from"./framework-aa5c4115.js";const l="/assets/image-20220808132559328-aedd9598.png",u={},d=p(`<h1 id="闭包" tabindex="-1"><a class="header-anchor" href="#闭包" aria-hidden="true">#</a> 闭包</h1><blockquote><p>本文1036字，阅读大概需要4分10秒</p></blockquote><p>闭包是学习JavaScript的必经之路，因为它随处可见。闭包如同你刷牙会挤牙膏一样重要。</p><h2 id="闭包是什么" tabindex="-1"><a class="header-anchor" href="#闭包是什么" aria-hidden="true">#</a> 闭包是什么</h2><p>闭包就是<strong>能够读取其他函数内部变量的函数</strong>。基于词法作用域写代码产生的结果，也就说闭包是一种特性不是只用语法或是Api。</p><h2 id="词法作用域" tabindex="-1"><a class="header-anchor" href="#词法作用域" aria-hidden="true">#</a> 词法作用域</h2><p>在理解闭包之前要先知道<code>词法作用域</code>，JavaScript分为两种工作模式：一种是<code>词法作用域</code>,一种是<code>动态作用域</code>。一般普遍使用词法作用域。</p><p>词法作用域怎么理解：<code>词法</code>和<code>作用域</code>。</p><h3 id="作用域-scope" tabindex="-1"><a class="header-anchor" href="#作用域-scope" aria-hidden="true">#</a> 作用域（Scope）</h3><p>是一个区间，JavaScript的执行有许多小房子，一开始最大房子:<code>全局作用域</code>，随后你在大房子里创建了一个小房子：<code>局部作用域</code>。</p><ul><li><strong>作用域（Scope）</strong> 指一个范围、区域或空间</li><li><strong>全局作用域（Global Scope）</strong> 指全局空间或一个公共空间</li><li><strong>局部作用域（Local Scope）</strong> 指一个局部空间或一个受限制的空间</li></ul><p>我们知道JavaScript的变量查找是向上查找的，如果定义了一个全局变量，要在局部作用域中使用它，需要向上查找。</p><p><strong>栗子</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 定义一个全局变量:</span>
<span class="token keyword">const</span> fullName <span class="token operator">=</span> <span class="token string">&quot;Oluwatobi Sofela&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// 定义多层嵌套函数:</span>
<span class="token keyword">function</span> <span class="token function">profile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">function</span> <span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">function</span> <span class="token function">writeName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> fullName<span class="token punctuation">;</span> <span class="token comment">//fullName </span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token function">writeName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="作用域链" tabindex="-1"><a class="header-anchor" href="#作用域链" aria-hidden="true">#</a> 作用域链</h3><p>是一种连接的方式，在房子当中穿梭需要一个指引。<code>fullName</code>在<code>writeName</code>局部作用域中不存在，需要往上一级寻找，直到作用域链末端——全局作用域，所以各作用域间有这样的链式关系：</p><p><strong>writeName() scope ---&gt; sayName() scope ---&gt; profile() scope ---&gt; global scope</strong></p><p>其次，如果<code>fullName</code>在该作用域中存在，则不会在作用域链上查找。</p><h3 id="词法-lexical" tabindex="-1"><a class="header-anchor" href="#词法-lexical" aria-hidden="true">#</a> 词法（Lexical）</h3><p>任何创建文字、表达式或变量的声明都叫词法。</p><h3 id="所以" tabindex="-1"><a class="header-anchor" href="#所以" aria-hidden="true">#</a> 所以</h3><p>词法作用域就是词法声明时所在的作用域。例如<code>fullName</code>的词法作用域就是全局作用域。</p><h2 id="函数闭包" tabindex="-1"><a class="header-anchor" href="#函数闭包" aria-hidden="true">#</a> 函数闭包</h2><p><strong>栗子</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">makeFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">&quot;Mozilla&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">function</span> <span class="token function">displayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">alert</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> displayName<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> myFunc <span class="token operator">=</span> <span class="token function">makeFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">myFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>分析代码的执行过程：声明<code>makeFunc</code>函数，在该词法作用域内声明了一个变量<code>name</code>和函数<code>displayName</code>,然后返回函数<code>displayName</code>，全局作用域中变量<code>myFunc</code>赋值<code>makeFunc</code>并执行。</p><p>在这期间，<code>displayName</code>函数和<code>name</code>的词法作用域是相同的。一般来说，<code>makeFunc</code>函数在执行返回语句之后，函数内的局部变量就会被销毁，导致<code>displayName</code>函数返回undefined，可是实际上在JavaScript中代码能成功执行并且返回<code>name</code>。</p><p>因为<code>displayName</code>函数的执行需要访问到<code>name</code>变量，作用域链的关系是：</p><p><strong>displayName() scope ---&gt; makeFunc() scope</strong></p><p>语句： alert(name);在该作用域找不到或者未声明name，则往链上上一级查找，因此函数闭包将词法作用域与函数绑定，每一个函数被创建之初则会形成闭包。</p><p><img src="`+l+`" alt="image-20220808132559328"></p><h2 id="闭包有什么用" tabindex="-1"><a class="header-anchor" href="#闭包有什么用" aria-hidden="true">#</a> 闭包有什么用</h2><p><strong>栗子</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">function</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        num<span class="token operator">++</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> b
<span class="token punctuation">}</span>
<span class="token keyword">let</span> c <span class="token operator">=</span>  <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>创建私有变量</p><p>变量<code>num</code>具有局限性，不会污染全局环境，其他函数不可访问，变量受到保护。</p></li><li><p>延迟生命周期 变量<code>num</code>在<code>a</code>函数返回值之后并没有清除，<code>function b</code>对<code>name</code>的累加生效。因为c变量保存了函数b，使b函数的词法作用域不会被销毁，也就是a函数内的作用域被保持，a函数将b函数包了起来。</p></li></ul>`,35),r={class:"custom-container details"},k=n("summary",{class:"custom-container-title"},"参考文献",-1),m={href:"https://vue3js.cn/interview/JavaScript/closure.html#%E4%B8%80%E3%80%81%E6%98%AF%E4%BB%80%E4%B9%88",target:"_blank",rel:"noopener noreferrer"},v={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Closures",target:"_blank",rel:"noopener noreferrer"},h={href:"https://zhuanlan.zhihu.com/p/21346046",target:"_blank",rel:"noopener noreferrer"},b={href:"https://www.runoob.com/w3cnote/closure-intro.html",target:"_blank",rel:"noopener noreferrer"};function f(g,_){const a=i("ExternalLinkIcon");return t(),c("div",null,[d,n("details",r,[k,n("ul",null,[n("li",null,[n("p",null,[n("a",m,[s("面试官：说说你对闭包的理解？闭包使用场景 | web前端面试 - 面试官系列 (vue3js.cn)"),e(a)])])]),n("li",null,[n("p",null,[n("a",v,[s("闭包 - JavaScript | MDN (mozilla.org)"),e(a)])])]),n("li",null,[n("p",null,[n("a",h,[s("到底什么是闭包 - 知乎 (zhihu.com)"),e(a)])])]),n("li",null,[n("p",null,[n("a",b,[s("什么是闭包？闭包的优缺点？ | 菜鸟教程 (runoob.com)"),e(a)])])])])])])}const w=o(u,[["render",f],["__file","closure.html.vue"]]);export{w as default};
